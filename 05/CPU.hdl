// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    // Use built-in ARegister, DRegister and PC chips

    // Updating the A register
    Not(in=instruction[15], out=ains);
    Mux16(a=aluout, b=instruction, sel=ains, out=aregin);
    Or(a=ains, b=instruction[5], out=aregload);
    ARegister(in=aregin, load=aregload, out=aregout, out[0..14]=addressM);

    // Updating the D register
    And(a=instruction[15], b=instruction[4], out=dregload);
    DRegister(in=aluout, load=dregload, out=dregout);

    // Running ALU
    Mux16(a=aregout, b=inM, sel=instruction[12], out=aluin);
    ALU(x=dregout, y=aluin, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, out=outM, zr=zr, ng=ng);

    // Write in RAM or not
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Program counter = jump logic
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    And(a=notzr, b=notng, out=pos);
    And(a=instruction[0], b=pos, out=jmp1); // positive?
    And(a=instruction[1], b=zr, out=jmp2); // zero?
    And(a=instruction[2], b=ng, out=jmp3); // negative?
    Or(a=jmp1, b=jmp2, out=jmp4);
    Or(a=jmp3, b=jmp4, out=jmp5);
    And(a=instruction[15], b=jmp5, out=jump);
    PC(in=aregout, load=jump, inc=true, reset=reset, out[0..14]=pc);
}
